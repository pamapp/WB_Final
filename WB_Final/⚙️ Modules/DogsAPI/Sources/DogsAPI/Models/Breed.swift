//
// Breed.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Breed: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the breed */
    public var id: Int
    /** The name of the breed */
    public var name: String
    public var weight: Measure?
    public var height: Measure?
    /** The original purpose or function of the breed */
    public var bredFor: String?
    /** The group the breed belongs to */
    public var breedGroup: String?
    /** Average life span of the breed */
    public var lifeSpan: String?
    /** Typical temperament of the breed */
    public var temperament: String?
    /** Origin of the breed */
    public var origin: String?
    /** ID of the reference image for the breed */
    public var referenceImageId: String?
    /** URL of the breed image */
    public var image: String? {
        if let referenceImageId = referenceImageId {
            return "https://cdn2.thedogapi.com/images/\(referenceImageId).jpg"
        }
        return nil
    }
    
    public init(id: Int, name: String, weight: Measure? = nil, height: Measure? = nil, bredFor: String? = nil, breedGroup: String? = nil, lifeSpan: String? = nil, temperament: String? = nil, origin: String? = nil, referenceImageId: String? = nil) {
        self.id = id
        self.name = name
        self.weight = weight
        self.height = height
        self.bredFor = bredFor
        self.breedGroup = breedGroup
        self.lifeSpan = lifeSpan
        self.temperament = temperament
        self.origin = origin
        self.referenceImageId = referenceImageId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case weight
        case height
        case bredFor = "bred_for"
        case breedGroup = "breed_group"
        case lifeSpan = "life_span"
        case temperament
        case origin
        case referenceImageId = "reference_image_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(bredFor, forKey: .bredFor)
        try container.encodeIfPresent(breedGroup, forKey: .breedGroup)
        try container.encodeIfPresent(lifeSpan, forKey: .lifeSpan)
        try container.encodeIfPresent(temperament, forKey: .temperament)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(referenceImageId, forKey: .referenceImageId)
    }
}

